@using scrum_board_tool.Shared;
@inject DialogService DialogService
@inject HttpClient http

<Draggable Data="Data" Zone="@Zone">
    <div class="task-box">
        <span class="delete-task" @onclick="@OnDelete">X</span>
        <RadzenTextBox @bind-Value="Data.Name" Style="width:80%; display: block" Name="Name" onblur="@(() => UpdateTask())" />
        <RadzenDropDown @bind-Value="Data.User" Data="@Project.Users" TextProperty="Name" ValueProperty="" Style="width:80%; display: block;" onblur="@(() => UpdateTask())">
            <Template>
                @context.Name
            </Template>
        </RadzenDropDown>
        <RadzenNumeric @bind-Value="Data.TimeRemaining" onblur="@(() => UpdateTask())" Style="width:50px; display: block"/>
    </div>
</Draggable>

@code {
    [Parameter]
    public WorkTask? Data { get; set; }

    [Parameter]
    public BacklogItem? Parent { get; set; }

    [Parameter]
    public string Zone { get; set; }

    [Parameter]
    public Action<WorkTask> Delete{ get; set; }

    [Parameter]
    public Project Project{ get; set; }

    IEnumerable<StateOfItems> states = ((StateOfItems[])Enum.GetValues(typeof(StateOfItems))).ToList();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    async void UpdateTask()
    {
        if (Parent != null && Data != null)
        {
            Parent.Tasks = new HashSet<WorkTask>();
            Data.BacklogItem = Parent;
        }
        _ = await http.PostAsJsonAsync($"worktask/{Data?.Id}", Data);
        Data = await http.GetFromJsonAsync<WorkTask>($"worktask/{Data?.Id}");

        StateHasChanged();
    }

    async void OnDelete()
    {
        Delete(Data);
    }
}
