@page "/users/{CurrentProjectId:int}"

@using scrum_board_tool.Shared
@inject HttpClient http
@inject DialogService DialogService

<RadzenHeader>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
        <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
        <RadzenLabel Text="scrum-board-tool" />
    </RadzenStack>
</RadzenHeader>
<RadzenSidebar Style="width:auto">
    <RadzenPanelMenu DisplayStyle="@(sidebar1Expanded?MenuItemDisplayStyle.IconAndText:MenuItemDisplayStyle.Icon)" ShowArrow=false>
        <RadzenPanelMenuItem Text="Projekte" Icon="home" Path="" />
        <RadzenPanelMenuItem Text="Sprints" Icon="autorenew" Path=@String.Format("/sprints/{0}", CurrentProjectId) />
        <RadzenPanelMenuItem Text="Backlogitems" Icon="category" Path=@String.Format("/backlogitems/{0}", CurrentProjectId) />
        <RadzenPanelMenuItem Text="Board" Icon="dashboard" Path=@String.Format("/board/{0}", CurrentProjectId) />
        <RadzenPanelMenuItem Text="Mitglieder" Icon="account_circle" Path=@String.Format("/users/{0}", CurrentProjectId) />
    </RadzenPanelMenu>
</RadzenSidebar>
<RadzenBody>
    <div class="rz-p-4">
        <PageTitle>Mitglieder</PageTitle>

        <h1>Mitglieder</h1>

        <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="New User" Click="@InsertRow" Disabled=@(userToInsert != null) id="newuser" />
        <RadzenDataGrid @ref="usersGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="Radzen.DataGridEditMode.Single"
                        Data="@users" TItem="User" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
            <Columns>
                <RadzenDataGridColumn TItem="User" Property="Id" Title="User Id" />
                <RadzenDataGridColumn TItem="User" Property="Name" Title="Name">
                    <EditTemplate Context="user">
                        <RadzenTextBox @bind-Value="user.Name" Style="width:100%; display: block" Name="Name" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Property="Role" Title="Rolle">
                    <EditTemplate Context="user">
                        <RadzenDropDown @bind-Value="user.Role" Data="@roles" TextProperty="" ValueProperty="" Style="width:100%; display: block;">
                            <Template>
                                @Enum.GetName(typeof(Role), context)
                            </Template>
                        </RadzenDropDown>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Context="whateaver" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center">
                    <Template Context="user">
                        <RadzenButton Icon="edit" ButtonStyle="Radzen.ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="user">
                        <RadzenButton Icon="save" Size="Radzen.ButtonSize.Small" Click="@((args) => SaveRow(user))" />
                        <RadzenButton Icon="cancel" Size="Radzen.ButtonSize.Small" ButtonStyle="Radzen.ButtonStyle.Secondary" Click="@((args) => CancelEdit(user))" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="User" Context="user" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center" Width="80px">
                    <Template Context="user">
                        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Icon="delete" Size="Radzen.ButtonSize.Small" Class="m-2" Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="user">
                        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Icon="delete" Size="Radzen.ButtonSize.Small" Class="m-2" Click="@(args => DeleteRow(user))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</RadzenBody>
<RadzenFooter>

</RadzenFooter>
@code {
    [Parameter]
    public int CurrentProjectId { get; set; }
    bool sidebar1Expanded = true;

    RadzenDataGrid<User>? usersGrid;
    IEnumerable<User> users = new List<User>();
    IEnumerable<Role> roles = ((Role[])Enum.GetValues(typeof(Role))).ToList();
    Project? CurrentProject;

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        CurrentProject = await http.GetFromJsonAsync<Project>($"project/{CurrentProjectId}");
        LoadUsers();
    }
    async Task EditRow(User user)
    {
        if (usersGrid != null)
        {
            await usersGrid.EditRow(user);
        }
    }

    async void OnUpdateRow(User user)
    {
        if (user == userToInsert)
        {
            userToInsert = null;
        }

        _ = await http.PostAsJsonAsync($"user/{user.Id}", user);
        LoadUsers();
    }

    async Task SaveRow(User user)
    {
        if (user == userToInsert)
        {
            userToInsert = null;
        }
        if (usersGrid != null)
        {
            await usersGrid.UpdateRow(user);
        }
    }

    void CancelEdit(User user)
    {
        if (user == userToInsert)
        {
            userToInsert = null;
        }
        if (usersGrid != null)
        {
            usersGrid.CancelEditRow(user);
            LoadUsers();
        }

    }

    async Task DeleteRow(User user)
    {
        if (user == userToInsert)
        {
            userToInsert = null;
        }
        if (usersGrid != null)
        {
            _ = await http.DeleteAsync("user/" + user.Id);
            LoadUsers();
        }
    }

    User? userToInsert;

    async Task InsertRow()
    {
        userToInsert = new User(){Project = CurrentProject ?? new Project()};
        if (usersGrid != null)
        {
            await usersGrid.InsertRow(userToInsert);
        }
    }

    async void OnCreateRow(User user)
    {
        _ = await http.PostAsJsonAsync("user", user);
        LoadUsers();
    }

    async void LoadUsers()
    {
        users = (await http.GetFromJsonAsync<User[]>($"user/GetByProjectId/{CurrentProjectId}"))?.ToList() ?? new List<User>();
        StateHasChanged();
    }
}